using GigabyteCustomKVMSwitch_Core.Exceptions;
using HidLibrary;

namespace GigabyteCustomKVMSwitch_Core.Models.M32Q;

internal class M32QController : IMonitorController
{
    public MonitorModel Model => Monitors.M32Q;

    public bool ToggleKvm()
    {

        using var device = HidDevices.Enumerate(Model.VendorId, Model.ProductId).FirstOrDefault();

        if (device == null)
        {
            throw new DeviceNotFoundException(this);
        }

        device.OpenDevice();

        if (!device.IsOpen)
        {
            throw new FailedToOpenDeviceException(this);
        }

        var buffer = CreateBuffer();

        var report = new HidReport(buffer.Length, new HidDeviceData(buffer, HidDeviceData.ReadStatus.Success));

        var result = device.WriteReport(report);

        return result;
    }

    private byte[] CreateBuffer()
    {
        var buffer = new byte[]
        {
            0x40, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x6E, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x51, 0x85, 0x03, 0xE0, 0x69, 0x00, 0x01, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };


        //Inserting an empty byte in the front to simulate ReportId
        var fix = new byte[] { 0x0 };

        return fix.Concat(buffer).ToArray();
    }
}
